<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ap-cs on WY Computer Science</title>
    <link>https://maueroats.github.io/teaching--2020-2021/categories/ap-cs/</link>
    <description>Recent content in ap-cs on WY Computer Science</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Sep 2018 11:26:51 -0500</lastBuildDate><atom:link href="https://maueroats.github.io/teaching--2020-2021/categories/ap-cs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. Intro</title>
      <link>https://maueroats.github.io/teaching--2020-2021/ap-cs/haskell/ch01/</link>
      <pubDate>Sat, 09 Sep 2017 15:34:07 -0500</pubDate>
      
      <guid>https://maueroats.github.io/teaching--2020-2021/ap-cs/haskell/ch01/</guid>
      <description>&lt;p&gt;A high-level overview of the Haskell language and why its features are good.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Haskell</title>
      <link>https://maueroats.github.io/teaching--2020-2021/ap-cs/haskell/</link>
      <pubDate>Wed, 05 Sep 2018 11:26:51 -0500</pubDate>
      
      <guid>https://maueroats.github.io/teaching--2020-2021/ap-cs/haskell/</guid>
      <description>You will need the the text Learn You a Haskell For Great Good.
 Tip: Use repl.it for programming.
 Haskell is a pure, lazy, statically typed language. In the first chapter you will learn what those terms mean. Later you will learn how to write programs.
Chapters  1. Intro
A high-level overview of the Haskell language and why its features are good.
  2. Starting Out</description>
    </item>
    
    <item>
      <title>Chapter 2 Reading Guide</title>
      <link>https://maueroats.github.io/teaching--2020-2021/ap-cs/haskell/ch02/ch02-reading-guide/</link>
      <pubDate>Sat, 09 Sep 2017 15:57:47 -0500</pubDate>
      
      <guid>https://maueroats.github.io/teaching--2020-2021/ap-cs/haskell/ch02/ch02-reading-guide/</guid>
      <description>Haskell Starting Out Questions A. Sections 2.1&amp;ndash;2.3   There is an annoyance with negative numbers that is mentioned.
 What is the correct way to write five times negative three in Haskell? What is a wrong way to do the same thing?    Logical operations are basic building blocks of programs. How do you write:
 and or not equals not equals    Haskell follows mostly the normal order of operations from mathematics.</description>
    </item>
    
    <item>
      <title>Source Code Files (ghci)</title>
      <link>https://maueroats.github.io/teaching--2020-2021/ap-cs/haskell/ghci-details/</link>
      <pubDate>Mon, 11 Sep 2017 10:12:55 -0500</pubDate>
      
      <guid>https://maueroats.github.io/teaching--2020-2021/ap-cs/haskell/ghci-details/</guid>
      <description>&lt;p&gt;Writing a file is different from typing in an interpreter like repl.it or ghci.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ch01 Reading Guide</title>
      <link>https://maueroats.github.io/teaching--2020-2021/ap-cs/haskell/ch01/ch01-reading-guide/</link>
      <pubDate>Sat, 09 Sep 2017 15:36:40 -0500</pubDate>
      
      <guid>https://maueroats.github.io/teaching--2020-2021/ap-cs/haskell/ch01/ch01-reading-guide/</guid>
      <description>Haskell introduction reading questions   Haskell is supposed to be a purely functional language. Unpack that:
 What does pure mean? What is the difference between functional and imperative? (The book is not so clear on this point. What do you think it says, in your own words?)    Haskell is lazy. What does this mean?
  Haskell is statically typed. This could be unpacked, too.</description>
    </item>
    
  </channel>
</rss>
